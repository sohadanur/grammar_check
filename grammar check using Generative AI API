from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List
import requests

# Initialize FastAPI app
app = FastAPI()
# API Key and URL for Google's Generative AI Model
GEMINI_API_KEY = ""
GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta2/text:generate?key=" + GEMINI_API_KEY

# Data Model for Request
class Sentence(BaseModel):
    line: str

class Paragraph(BaseModel):
    sentences: List[Sentence]

# In-memory storage for corrections
corrections = []

@app.post("/grammar-check")
async def check_grammar(paragraph: Paragraph):
    global corrections
    corrections = []

    for sentence in paragraph.sentences:
        # Prepare the request payload
        payload = {
            "prompt": {"text": sentence.line},
            "temperature": 0.7,
            "candidate_count": 1
        }

        headers = {
            "Content-Type": "application/json"
        }

        # Call Google's Generative AI API
        try:
            response = requests.post(GEMINI_API_URL, json=payload, headers=headers)
            response_data = response.json()

            if response.status_code != 200:
                raise HTTPException(status_code=500, detail="Error in Google API response")

            # Extract corrected text (modify based on actual API response)
            candidates = response_data.get("candidates", [])
            corrected_text = candidates[0]["output"] if candidates else sentence.line

            # Append to results
            corrections.append({
                "line": sentence.line,
                "correction": corrected_text
            })
        except Exception as e:
            raise HTTPException(status_code=500, detail=str(e))

    return {"corrections": corrections}

@app.get("/get-corrections")
async def get_corrections():
    return {"corrections": corrections}
